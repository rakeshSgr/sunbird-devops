- name: Make sure backup dir is empty
  file: path="{{ cassandra_backup_dir }}" state=absent
  ignore_errors: true

- name: Create the directory
  become: yes
  file: path=/var/lib/cassandra/cassandra_backup/backup state=directory recurse=yes

- name: copy the backup script
  become: yes
  template:
    src: ../../../../deploy/cassandra_backup.py
    dest: /var/lib/cassandra/cassandra_backup/backup/cassandra_backup.py
    mode: 0755

- set_fact:
    cassandra_backup_gzip_file_name: "cassandra-backup-{{ lookup('pipe', 'date +%Y%m%d') }}-{{ ansible_hostname }}-new"

- name: run the backup script
  become: yes
  shell: python3 cassandra_backup.py --snapshotname "{{ cassandra_backup_gzip_file_name }}" --snapshotdirectory "{{ cassandra_backup_gzip_file_name }}" "{{additional_arguments|d('')}}"
  args:
    chdir: /var/lib/cassandra/cassandra_backup/backup
  async: 14400
  poll: 30

- name: Compress the backup file
  shell: "tar -czf {{ cassandra_backup_gzip_file_name }}.tar.gz {{ cassandra_backup_gzip_file_name }}"
  args:
    chdir: /var/lib/cassandra/cassandra_backup/backup
  async: 14400
  poll: 30

- name: Check doc_root path
  shell: ls -all /var/lib/cassandra/cassandra_backup/backup/
  register: doc_data

- name: print doc_root to console
  debug:
    var: doc_data

- set_fact:
    cassandra_backup_name: "cassanra_backup_{{ lookup('pipe', 'date +%Z-%Y-%m-%d-%H-%M-%S') }}"
- name: upload to gcs
  include_role:
    name: artifacts-upload-gcp
  vars:
    artifacts_container: "{{ backup_bucket }}/{{ cassandra_backup_folder }}"
    artifact_path: "/var/lib/cassandra/cassandra_backup/backup/{{ cassandra_backup_gzip_file_name }}.tar.gz"
    artifact: "{{ cassandra_backup_name }}/"
    service_account: "{{ gcp_backups_service_account }}"

- name: clean up backup dir after upload
  file: path="{{ cassandra_backup_dir }}" state=absent
